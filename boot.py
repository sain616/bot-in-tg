import random
import os
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

class ITQuizBot:
    def __init__(self, token):
        self.questions = [
            {
                "question": "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–ª Guido van Rossum?",
                "options": ["Java", "Python", "C++", "JavaScript"],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! Python –±—ã–ª —Å–æ–∑–¥–∞–Ω –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º –≤ 1991 –≥–æ–¥—É."
            },
            {
                "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ 'HTML'?",
                "options": [
                    "Hyperlinks and Text Markup Language",
                    "Home Tool Markup Language",
                    "Hyper Text Markup Language",
                    "Hyper Transfer Markup Language"
                ],
                "correct": 2,
                "explanation": "‚úÖ –í–µ—Ä–Ω–æ! HTML - Hyper Text Markup Language."
            },
            {
                "question": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ/–ª–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è?",
                "options": ["String", "Boolean", "Integer", "Float"],
                "correct": 1,
                "explanation": "‚úÖ –¢–æ—á–Ω–æ! Boolean (–±—É–ª–µ–≤ —Ç–∏–ø) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è True/False."
            },
            {
                "question": "–ö–∞–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–µ–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å O(n log n) –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ?",
                "options": ["–ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è", "–ë—ã—Å—Ç—Ä–∞—è", "–í—Å—Ç–∞–≤–∫–∞–º–∏", "–í—ã–±–æ—Ä–æ–º"],
                "correct": 1,
                "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (QuickSort) –∏–º–µ–µ—Ç O(n log n)."
            },
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π' –≤ Git?",
                "options": [
                    "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä",
                    "–•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–∞",
                    "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                ],
                "correct": 1,
                "explanation": "‚úÖ –í–µ—Ä–Ω–æ! –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π - —ç—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–∞ –∏ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            }
        ]
        
        self.application = Application.builder().token(token).build()
        
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("quiz", self.start_quiz))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )
        
        self.user_data = {}
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        self.user_data[chat_id] = {
            'score': 0,
            'current_question': None,
            'quiz_active': False
        }
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø IT-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –±–æ—Ç.\n"
            "–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö!\n\n"
            "–ù–∞–∂–º–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    async def start_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {
                'score': 0,
                'current_question': None,
                'quiz_active': False
            }
        
        questions = random.sample(self.questions, len(self.questions))
        self.user_data[chat_id].update({
            'score': 0,
            'current_question': 0,
            'quiz_active': True,
            'questions': questions
        })
        
        await self.ask_question(update, chat_id)
    
    async def ask_question(self, update: Update, chat_id: int):
        """–ó–∞–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_state = self.user_data[chat_id]
        question_num = user_state['current_question']
        question_data = user_state['questions'][question_num]
        
        keyboard = [[option] for option in question_data['options']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        
        await update.message.reply_text(
            f"‚ùì –í–æ–ø—Ä–æ—Å {question_num + 1}/{len(self.questions)}:\n"
            f"{question_data['question']}",
            reply_markup=reply_markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        
        if chat_id not in self.user_data or not self.user_data[chat_id]['quiz_active']:
            await update.message.reply_text("–ù–∞–∂–º–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
            return
        
        user_state = self.user_data[chat_id]
        question_data = user_state['questions'][user_state['current_question']]
        user_answer = update.message.text
        
        if user_answer in question_data['options']:
            answer_index = question_data['options'].index(user_answer)
            if answer_index == question_data['correct']:
                user_state['score'] += 1
                reply_text = question_data['explanation']
            else:
                correct_answer = question_data['options'][question_data['correct']]
                reply_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
            
            await update.message.reply_text(reply_text)
            
            user_state['current_question'] += 1
            if user_state['current_question'] < len(self.questions):
                await self.ask_question(update, chat_id)
            else:
                await self.end_quiz(update, chat_id)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    
    async def end_quiz(self, update: Update, chat_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        user_state = self.user_data[chat_id]
        total = len(self.questions)
        score = user_state['score']
        
        result_message = (
            f"üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total}\n\n"
        )
        
        if score == total:
            result_message += "üî• –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã IT-–≥–µ–Ω–∏–π!"
        elif score >= total / 2:
            result_message += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã IT!"
        else:
            result_message += "üí™ –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        
        result_message += "\n\n–ù–∞–∂–º–∏ /quiz —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞."
        
        await update.message.reply_text(
            result_message,
            reply_markup=ReplyKeyboardRemove()
        )
        user_state['quiz_active'] = False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == '__main__':
    TOKEN = "7651311186:AAHBlwOnTV49ssQpGY1hoiBRUmGRTjrcYsg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    bot = ITQuizBot(TOKEN)
    bot.run()